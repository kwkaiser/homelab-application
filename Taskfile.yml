version: '3'

tasks:
  # Local dev
  ssh-forward:
    desc: "Uses SSH port forwarding to bind local ports to vagrant ports"
    cmds:
      - sudo ssh -g -L 80:localhost:6880 -f -N kwkaiser@localhost
      - sudo ssh -g -L 443:localhost:6840 -f -N kwkaiser@localhost

  # Util
  template:
    desc:  "Builds helm template"
    prompt: "Did you set the MODE envar to dev | prod? (Defaults to: dev)"
    cmds:
      - |
        DEPL_ENV="${MODE:-dev}"
        helm dependency build
        helm template . --values ./values/shared.yaml --values ./values/$DEPL_ENV.yaml > template.yaml

  lint:
    desc: "Lint generated template"
    deps: [template]
    cmds:
      - helm lint .
      - cat template.yaml | kubeconform

  # Local and prod
  apply-secrets:
    desc: "Creates or updates secrets in the cluster" 
    prompt: "Did you set the MODE envar to dev | prod? (Defaults to: dev)"
    cmds:
      - |
        # Assume non prod-like
        DEPL_ENV="${MODE:-dev}"

        # If local, load secrets from defaults
        if [[ $DEPL_ENV != 'prod' ]];
        then
          set -a
          source ./vars/local-secrets.txt
          set +a
        fi

        KEYS=$(jq -n env | jq 'keys[] | select(startswith("k8s"))')

        for KEY in $KEYS; 
        do
          cleaned_key=$(echo $KEY | sed 's/"//g')
          cleaned_name=$(echo "$cleaned_key" | cut -c5- | sed 's/_/./g' )
          value=$(jq -n env | jq ".$cleaned_key")
          cleaned_value=$(printf "$(echo ${value:1:-1})")
          kubectl --kubeconfig {{.KUBECONFIG}} create secret generic "$cleaned_name" --from-literal=value="$cleaned_value" --dry-run=client -o yaml | kubectl --kubeconfig {{.KUBECONFIG}} apply -f -
        done

  deploy:
    desc:  "Redeploys k8s template"
    deps: [apply-secrets]
    prompt: "Did you set the MODE envar to dev | prod? (Defaults to: dev)"
    cmds:
      - |
        DEPL_ENV="${MODE:-dev}"

        if [[ $DEPL_ENV == 'prod' ]]; then
          ARGS="--values ./values/shared.yaml --values ./values/prod.yaml"
        else
          ARGS="--values ./values/shared.yaml --values ./values/dev.yaml"
        fi

        helm --kubeconfig {{.KUBECONFIG}} --wait upgrade bingus . $ARGS --dependency-update && echo 'Updated!' || helm --kubeconfig {{.KUBECONFIG}} --wait install bingus . $ARGS --dependency-update