# Sources
source_directories:
  - /bulk/application/gitea/data
  - /bulk/application/gitea/repos
  - /bulk/application/jellyfin
  - /bulk/application/qbittorrent
  - /bulk/application/registry
  - /bulk/application/calibre
  - /bulk/application/openldap
  - /bulk/application/prowlarr
  - /bulk/application/radarr
  - /bulk/application/sonarr
  - /bulk/application/immich/media
  - /bulk/application/mealie/app
  - /bulk/application/syncthing
  - /bulk/shared/books

postgresql_databases:
  - name: postgres
    hostname: giteadb
    username: postgres
    password: ${GITEA_DB_PASSWORD}
    format: tar

  - name: postgres
    hostname: minifluxdb
    username: postgres
    password: ${MINIFLUX_DB_PASSWORD}
    format: tar

  - name: postgres
    hostname: immichdb
    username: postgres
    password: ${IMMICH_DB_PASSWORD}
    format: tar

  - name: postgres
    hostname: mealiedb
    username: postgres
    password: ${MEALIE_DB_PASSWORD}
    format: tar

# Retention
keep_within: 7d
keep_daily: 7
keep_weekly: 1
keep_monthly: 1

# Repos
repositories:
  - path: ssh://gyd00bnt@gyd00bnt.repo.borgbase.com/./repo
    label: borgbase

# Remote
relocated_repo_access_is_ok: true
ssh_command: ssh -o StrictHostKeyChecking=no -i /borgmatic-borgbase-key-2

extra_borg_options:
  create: --progress --stats
  prune: --stats
  compact: --progress
  check: --progress

# Actions
checks:
  - name: repository
  - name: archives
    frequency: 2 weeks

before_backup:
  - echo 'Starting backup'

after_backup:
  - echo 'Ended backup'
  - borgmatic check

before_check:
  - echo 'Starting checks'

after_check:
  - echo 'Ended checks'
  - borgmatic prune --match-archives '*' --list

before_prune:
  - echo 'Starting prune'

after_prune:
  - echo 'Ended prune'
  - borgmatic compact

before_compact:
  - echo 'Starting compact'

after_compact:
  - echo 'Ended compact'

after_everything:
  - apk update
  - apk add -U curl
  - curl -d "Completed server backup" ntfy.sh/KAyIMTgBtdbI2uWHVZFS
# - echo 'Creating and uploading backup file'
# - apk update
# - pip install s3cmd
# - tar cf /tar-dir/{{ .Values.backupName}}.tar /raw-backup/*
# - s3cmd put /tar-dir/{{ .Values.backupName }}.tar s3://borg-backup/{{ .Values.backupName }}.tar --access_key=${LINODE_CLI_OBJ_ACCESS_KEY} --secret_key=${LINODE_CLI_OBJ_SECRET_KEY} --host='borg-backup.us-east-1.linodeobjects.com' --host-bucket='borg-backup' --multipart-chunk-size-mb=100
